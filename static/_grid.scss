[data-grid] {display: grid;}
[data-grid~=inline] {display: inline-grid;}

[data-grid~=column] {grid-auto-flow: column;}
[data-grid~=row] {grid-auto-flow: row;}
[data-grid~=dense] {grid-auto-flow: dense;}
[data-grid~=column-dense] {grid-auto-flow: column dense;}
[data-grid~=row-dense] {grid-auto-flow: row dense;}

[data-grid~=alit-start] {align-items: flex-start;}
[data-grid~=alit-end] {align-items: flex-end;}
[data-grid~=alit-center] {align-items: center;}
[data-grid~=alit-stretch] {align-items: stretch;}

[data-grid~=juit-start] {justify-items: flex-start;}
[data-grid~=juit-end] {justify-items: flex-end;}
[data-grid~=juit-center] {justify-items: center;}
[data-grid~=juit-stretch] {justify-items: stretch;}

[data-grid~=juco-start] {justify-content: flex-start;}
[data-grid~=juco-end] {justify-content: flex-end;}
[data-grid~=juco-center] {justify-content: center;}
[data-grid~=juco-around] {justify-content: space-around;}
[data-grid~=juco-between] {justify-content: space-between;}
[data-grid~=juco-evenly] {justify-content: space-evenly;}
[data-grid~=juco-stretch] {justify-content: stretch;}

[data-grid~=alco-start] {align-content: flex-start;}
[data-grid~=alco-end] {align-content: flex-end;}
[data-grid~=alco-center] {align-content: center;}
[data-grid~=alco-around] {align-content: space-around;}
[data-grid~=alco-between] {align-content: space-between;}
[data-grid~=alco-evenly] {align-content: space-evenly;}
[data-grid~=alco-stretch] {align-content: stretch;}

@for $i from 1 through $max-columns {
  [data-grid~=col#{$i}] {
    grid-template-columns: repeat($i, 1fr);
  }
}
@for $i from 1 through $max-rows {
  [data-grid~=row#{$i}] {
    grid-template-rows: repeat($i, 1fr);
  }
}

@each $breakpoint, $value in $breakpoints {
  @media screen and (min-width: $value) {
    @for $i from 1 through $max-columns {
      [data-grid~=col#{$breakpoint}#{$i}] {
        grid-template-columns: repeat($i, 1fr);
      }
    }
    @for $i from 1 through $max-rows {
      [data-grid~=row#{$breakpoint}#{$i}] {
        grid-template-rows: repeat($i, 1fr);
      }
    }
  }
}

@each $label, $value in $space-multipliers {
  @each $direction, $prop in $cell-direction {
    [data-grid~=gap#{$direction}#{$label}] {
      #{$prop}-gap: $space * $value;
    }
  }
}
